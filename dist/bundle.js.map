{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;AAA0B;;AAEX;AACf;AACA,uBAAuB;AACvB;AACA;AACA;AACA,iCAAiC,6CAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrBe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;AC9Fe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,eAAe;;;;;;;;;;;;;;;;;ACnBQ;AACyB;;;AAGhD;;;AAGf,qBAAqB,yDAAS;AAC9B;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC,wBAAwB,aAAa;AACrC;AACA;AACA,yBAAyB,qEAAqB;AAC9C,yCAAyC,EAAE,GAAG,EAAE;AAChD;AACA;AACA;AACA,0BAA0B,qEAAqB;AAC/C,yCAAyC,EAAE,GAAG,EAAE;AAChD;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;;;;;;;;;;;;;;;;AC3Ce;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;ACjBsC;AACwB;AACpB;;AAE3B;AACf;AACA,IAAI,qEAAqB,wBAAwB,yDAAS;AAC1D,uBAAuB,yDAAS;AAChC,qBAAqB,qEAAqB;AAC1C,IAAI,qEAAqB;;AAEzB,qBAAqB,2DAAW;AAChC;AACA;;;;;;;;;;;;;;;ACZe;AACf;AACA,cAAc;AACd;AACA,qBAAqB;;AAErB,oCAAoC;;AAEpC;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;;;;ACZqC;AACJ;AACG;AACoB;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,uDAAK;;AAEhC;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;;;;;;;;;;UC1EA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNoC;AACY;AACkC;AAClD;AACE;;;;;AAKlC,mEAAQ;AACR,iBAAiB,0DAAS;AAC1B;AACA;AACA;;AAEA;AACA;AACA,IAAI,kEAAiB;AACrB;AACA,yBAAyB,qDAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,gBAAgB,kEAAiB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;;;AAGA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,0DAAS;AACxB;;AAEA;AACA","sources":["webpack://knight-travails/./src/Class/Graph.js","webpack://knight-travails/./src/Class/Knight.js","webpack://knight-travails/./src/Class/Node.js","webpack://knight-travails/./src/component/cp-container.js","webpack://knight-travails/./src/component/cp-createBoard.js","webpack://knight-travails/./src/component/cp-createElementWithText.js","webpack://knight-travails/./src/component/cp-init-page.js","webpack://knight-travails/./src/component/prettyPrint.js","webpack://knight-travails/./src/logic/logic.js","webpack://knight-travails/webpack/bootstrap","webpack://knight-travails/webpack/runtime/define property getters","webpack://knight-travails/webpack/runtime/hasOwnProperty shorthand","webpack://knight-travails/webpack/runtime/make namespace object","webpack://knight-travails/./src/knight-travails.js"],"sourcesContent":["import Node from './Node';\n\nexport default class Graph {\n    constructor() {\n      this.nodes = {}; // Stocke les nœuds sous forme de dictionnaire pour un accès rapide\n    }\n  \n    addNode(position) {\n      this.nodes[position] = new Node(position);\n    }\n  \n    addEdge(position1, position2) {\n      // Assurez-vous que les deux positions sont valides\n      if (this.nodes[position1] && this.nodes[position2]) {\n        this.nodes[position1].edges.push(this.nodes[position2]);\n      }\n    }\n  \n    getNode(position) {\n      return this.nodes[position];\n    }\n  }\n  ","\nexport default class Knight {\n  constructor(position) {\n    this._position = position;\n    \n  }\n\n  getPosition() {\n    return this._position;\n  }\n\n  knightMove(finalPosition) {\n    if (this.isMovementValid(finalPosition)) \n          this._position = finalPosition;\n  }\n\n \n\n  shortedWayToPosition(startPosition,finalPosition,graph) {\n    \n      let queue = [];\n      let visited = [];  // Utilisez un tableau pour les positions visitées\n      let predecessor = {};\n  \n      queue.push(startPosition);\n      visited.push(startPosition);\n  \n      while (queue.length > 0) {\n          let currentPosition = queue.shift();\n  \n          if (areArraysEqual(currentPosition, finalPosition)) {\n              return reconstructPath(predecessor, finalPosition);\n          }\n  \n          for (let edge of graph.getNode(currentPosition).edges) {\n              let nextPosition = edge.position;\n  \n              if (!isVisited(visited, nextPosition)) {\n                  queue.push(nextPosition);\n                  visited.push(nextPosition);\n                  predecessor[arrayToString(nextPosition)] = currentPosition;\n              }\n          }\n      }\n  \n      return [];  // Aucun chemin trouvé\n    \n  \n  \n      function reconstructPath(predecessor, finalPosition) {\n        let path = [finalPosition];\n        let currentPosition = finalPosition;\n    \n        while (arrayToString(currentPosition) in predecessor) {\n            currentPosition = predecessor[arrayToString(currentPosition)];\n            path.unshift(currentPosition);  // Ajouter au début du chemin\n        }\n    \n        // La position de départ sera la dernière ajoutée. Si elle est votre position initiale, retirez-la.\n        if (areArraysEqual(path[0], startPosition)) {\n            path.shift(); // Retirer la position de départ si elle est incluse\n        }\n    \n        return path;\n    }\n    \n  \n  function areArraysEqual(arr1, arr2) {\n      if (arr1.length !== arr2.length) return false;\n      for (let i = 0; i < arr1.length; i++) {\n          if (arr1[i] !== arr2[i]) return false;\n      }\n      return true;\n  }\n  \n  function isVisited(visited, position) {\n      return visited.some(visitedPosition => areArraysEqual(visitedPosition, position));\n  }\n  \n  function arrayToString(array) {\n      return array.join(',');\n  }\n        \n}\n\n/***/\n\n\n  isMovementValid(finalPosition) {\n    const dx = Math.abs(finalPosition[1] - this._position[1]);\n    const dy = Math.abs(finalPosition[0] - this._position[0]);\n\n    return (dx === 2 && dy === 1) || (dx === 1 && dy === 2);\n  }\n}","export default class Node \n{\n\n    constructor(position) {\n      this.position = position;\n      this.edges = []; \n    }\n  }\n  ","/*Create a new div with the class of className and it to his parent */\nconst createContainer=(className,parent)=>{\n    \n    const element = document.createElement('div');\n    element.classList.add(className);\n   \n    if(parent)\n    {\n         parent.appendChild(element);\n         return element\n        \n    }\n    else\n    {\n         document.getElementById('app').appendChild(element);\n         return element\n    }\n    \n}\n\nexport default createContainer;","\nimport Container from './cp-container'\nimport createElementWithText from './cp-createElementWithText';\n\n\nexport default function createBoard(){\n\n\n    const boardDiv = Container(\"board\")\n    let board = [];\n    let numRows = 8;\n    let numCols = 8;\n   \n    \n    for (let i = 0; i < numRows; i++) {\n        board[i] = [];\n        for (let j = 0; j < numCols; j++) {\n           \n            board[i][j] = 0;\n        }\n    }\n    \n    let element; \n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            \n            if((i+j)%2===0){\n                element= createElementWithText('div',``,boardDiv,\"white\")\n                element.classList.add(`${i}/${j}`)\n                \n            }\n            else{\n                element = createElementWithText('div',``,boardDiv,\"black\")\n                element.classList.add(`${i}/${j}`)\n            }\n            \n                   \n        }\n    }\n\n\n\n        return boardDiv;\n            \n\n}","\n\nexport default function createElementWithText(balise,text,container,className)\n{\n   const element= document.createElement(balise)\n   element.innerText= text\n\n    if(className)\n        element.classList.add(className)\n\n    if(container)\n        container.appendChild(element)\n    else\n        document.getElementById('app').appendChild(element)\n\n    return element;\n\n}\n\n","import Container from \"./cp-container\"\nimport createElementWithText from \"./cp-createElementWithText\"\nimport createBoard from \"./cp-createBoard\"\n\nexport default function initPage()\n{\n    createElementWithText('h1',\"Knight Travails\",Container(\"title\"),\"title\")\n    const divGestion = Container(\"gestion\");\n    const btnReset = createElementWithText('button',\"Reset Board\",divGestion,\"btn\");\n    createElementWithText('h3',\"Click on the board to place Knight\",divGestion,\"info-display\");\n\n    const boardDiv = createBoard();\n    \n}","\nexport default function prettyPrintGraph(node, visited = new Set(), prefix = \"\") {\n  if (visited.has(node)) {\n      return; // Si le nœud a déjà été visité, arrêter pour éviter les cycles infinis\n  }\n  visited.add(node); // Marquer le nœud comme visité\n\n  console.log(prefix + node.value); // Afficher la valeur du nœud\n\n  node.edges.forEach(childNode => {\n      prettyPrintGraph(childNode, visited, prefix + \"   \");\n  });\n}\n","import Knight from \"../Class/Knight\";\nimport Node from \"../Class/Node\";\nimport Graph from\"../Class/Graph.js\"\nimport prettyPrintGraph from \"../component/prettyPrint\";\n\nfunction getPositionWanted() {\n    return new Promise((resolve) => {\n    const cases = document.querySelector('.board').querySelectorAll('*');\n      \n  \n      function clickHandler(e) {\n        e.preventDefault();\n        const element = e.currentTarget;\n        \n\n        const position = element.classList[1].split('/').map((string) => parseFloat(string));\n        resolve(position);\n\n        cases.forEach((caseElement) => {\n        caseElement.removeEventListener('click', clickHandler);\n\n        });\n        return position;\n      }  \n      cases.forEach((element) => {\n        element.addEventListener('click', clickHandler);\n      });\n    });\n}\n\nfunction getAllMovePossible(knight)\n{\n    const allNextMovePossible = [];\n    const cases = document.querySelector('.board').querySelectorAll('*');\n    cases.forEach(element => {\n        let position = element.classList[1].split('/').map((string)=>parseFloat(string))\n        if(knight.isMovementValid(position))\n        {\n            allNextMovePossible.push(position)     \n        }\n    })\n\n    return allNextMovePossible;\n}\n\nfunction initGraph()\n{\n    const knightMoves = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n\n    const chessGraph = new Graph();\n\n    // Ajouter des nœuds pour chaque position sur l'échiquier\n    for (let x = 0; x < 8; x++) {\n    for (let y = 0; y < 8; y++) {\n        chessGraph.addNode([x, y]);\n    }\n    }\n\n    // Ajouter des arêtes pour les mouvements valides du cavalier\n    for (let x = 0; x < 8; x++) {\n    for (let y = 0; y < 8; y++) {\n        knightMoves.forEach(move => {\n        const newX = x + move[0];\n        const newY = y + move[1];\n\n        if (newX >= 0 && newX < 8 && newY >= 0 && newY < 8) {\n            chessGraph.addEdge([x, y], [newX, newY]);\n        }\n        });\n    }\n    }\n    return chessGraph;\n}\n\n/***/\n\n\n\n\nexport {getPositionWanted,getAllMovePossible,initGraph}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Knight from \"./Class/Knight\";\nimport initPage from \"./component/cp-init-page\";\nimport { getAllMovePossible, getPositionWanted,initGraph} from \"./logic/logic.js\";\nimport Node from \"./Class/Node\";\nimport Graph from \"./Class/Graph\";\n\n\n\n\ninitPage();\nlet chessGraph = initGraph();\nlet knight = null\nconst cases= document.querySelector('.board').querySelectorAll('*')\nmakeMove();\n\nfunction makeMove()\n{\n    getPositionWanted()\n        .then((position)=>{\n            knight = new Knight(position)\n            cases.forEach(element => {\n                document.querySelector('.info-display').innerText=\"Now click on the destination you want to reach !  \"\n                let position = element.classList[1].split('/').map((string)=>parseFloat(string))\n                    if(knight._position[0] === position[0]&& knight._position[1]=== position[1])\n                    {\n                        element.classList.toggle('knight-icon')\n                        element.innerText =\"Start\"\n                        element.classList.add('start')\n                    }   \n            })\n        }).\n            then(()=>{\n                getPositionWanted()\n                .then((position) => {\n\n                    cases.forEach(element => {\n                        let p = element.classList[1].split('/').map((string)=>parseFloat(string))\n                            if(p[0] === position[0]&& p[1]=== position[1])   \n                            {\n                                element.innerText = \"X\"\n                                    \n                            }        \n                        \n                    });\n                    const movement = knight.shortedWayToPosition(knight._position,position,chessGraph);\n                    \n                    simulateKnightMoveOnBoard(movement)\n                    \n                });\n        })\n}\n\n\nfunction moveKnightOnBoard(kPosition)\n{\n    cases.forEach(element => {\n        element.classList.remove('knight-icon');\n    });\n  \n    cases.forEach(element => {\n        let position = element.classList[1].split('/').map((string)=>parseFloat(string))\n            if(kPosition[0] === position[0]&& kPosition[1]=== position[1])   \n            {\n                element.classList.toggle('knight-icon')\n                element.innerText=\"Visited\"\n                    \n            }        \n        \n    });\n}\n\nfunction simulateKnightMoveOnBoard(movement)\n{\n    let currentIndex = 0\n    let moveInterval = setInterval(() => {\n        if (currentIndex < movement.length) {\n            moveKnightOnBoard(movement[currentIndex]);\n            currentIndex++;\n        } else {\n            \n            clearInterval(moveInterval); \n            document.querySelector('.knight-icon').innerText = \" \"\n            document.querySelector('.btn').addEventListener('click',reset);\n\n        }\n    }, 750);\n    \n}\n\n\n\nfunction reset() {\n  // Supprimez la classe 'knight-icon' et réinitialisez le contenu des éléments\n  cases.forEach(element => {\n    element.classList.remove('knight-icon', 'start');\n    element.innerText = \"\";\n  });\n\n  // Réinitialisez le texte de la zone d'information\n  document.querySelector('.info-display').innerText = \"Click on the starting position to begin.\";\n\n  // Réinitialisez la classe CSS du bouton\n  document.querySelector('.btn').classList.remove('disabled');\n\n  // Réinitialisez le graphique, le chevalier, et tout autre état nécessaire\n  chessGraph = initGraph();\n  knight = null;\n\n  makeMove();\n}\n\n\n\n"],"names":[],"sourceRoot":""}